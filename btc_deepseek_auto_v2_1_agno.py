#!/usr/bin/env python3
"""
Runner autom√°tico para Backtesting V2.1 - AGNO-COMPLIANT
Ejecuta hourly_backtest_v2_1_agno_compliant.py con par√°metros CLI

Uso:
    python btc_deepseek_auto_v2_1_agno.py <days> <interval_hours>

Ejemplos:
    python btc_deepseek_auto_v2_1_agno.py 7 1    # 7 d√≠as, decisi√≥n cada 1h
    python btc_deepseek_auto_v2_1_agno.py 30 2   # 30 d√≠as, decisi√≥n cada 2h
    python btc_deepseek_auto_v2_1_agno.py 60 4   # 60 d√≠as, decisi√≥n cada 4h
"""

import subprocess
import sys
from datetime import datetime


def main():
    # Par√°metros por defecto
    days = int(sys.argv[1]) if len(sys.argv) > 1 else 7
    interval_hours = int(sys.argv[2]) if len(sys.argv) > 2 else 1

    print("=" * 80)
    print("üöÄ BACKTESTING AUTOM√ÅTICO V2.1 - AGNO-COMPLIANT")
    print("=" * 80)
    print(f"üìÖ Per√≠odo: {days} d√≠as")
    print(f"‚è∞ Intervalo de decisiones: Cada {interval_hours} hora(s)")
    print(f"ü§ñ Framework: Agno V2 (instructions + output_schema)")
    print(f"‚è±Ô∏è  Inicio: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 80)
    print()

    # Ejecutar backtest
    cmd = ["python3", "hourly_backtest_v2_1_agno_compliant.py", str(days), str(interval_hours)]

    print(f"üéØ Ejecutando: {' '.join(cmd)}")
    print()

    try:
        result = subprocess.run(cmd, check=True)

        print()
        print("=" * 80)
        print("‚úÖ BACKTESTING COMPLETADO EXITOSAMENTE")
        print(f"‚è±Ô∏è  Fin: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 80)

        return result.returncode

    except subprocess.CalledProcessError as e:
        print()
        print("=" * 80)
        print(f"‚ùå ERROR EN BACKTESTING: {e}")
        print("=" * 80)
        return e.returncode
    except KeyboardInterrupt:
        print()
        print("=" * 80)
        print("‚ö†Ô∏è BACKTESTING INTERRUMPIDO POR USUARIO")
        print("=" * 80)
        return 130


if __name__ == "__main__":
    sys.exit(main())
