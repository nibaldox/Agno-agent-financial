#!/usr/bin/env python3
"""
Demo r√°pido de backtesting horario
Ejecuta autom√°ticamente BTC-USD con 7 d√≠as de datos, decisiones cada 4 horas
"""

import sys

sys.path.insert(0, "/Users/xodla/Documents/Code/06-Agentes/Agno-agent-financial")

from hourly_backtest import MODELS, HourlyBacktestEngine


def main():
    print("\nüöÄ DEMO R√ÅPIDO - BACKTESTING HORARIO")
    print("=" * 70)
    print("Configuraci√≥n:")
    print("  ‚Ä¢ Ticker: BTC-USD")
    print("  ‚Ä¢ Per√≠odo: 7 d√≠as (datos horarios)")
    print("  ‚Ä¢ Decisiones: Cada 4 horas")
    print("  ‚Ä¢ Capital: $10,000")
    print("  ‚Ä¢ Modelo: Nemotron Nano (r√°pido)")
    print("=" * 70)

    # Crear engine
    engine = HourlyBacktestEngine(
        tickers=["BTC-USD"], days=7, decision_interval_hours=4, initial_capital=10000.0
    )

    # Ejecutar
    metrics = engine.run_simulation(model_id=MODELS["fast_calc"])

    # Guardar
    if metrics:
        engine.save_results("demo_hourly_btc.json")
        print("\n‚úÖ Demo completado! Resultados guardados en demo_hourly_btc.json")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã Demo interrumpido")
    except Exception as e:
        print(f"\n‚ùå Error: {str(e)}")
        import traceback

        traceback.print_exc()
